[string]

legendname = SLinGen

# Kernel name
func_name = kernel
algodb = src/algogen/OUTPUT/LL

[code]

#If code already generated use it to run experiment
runprecomputed = False
runprecompdir = "../output/results"

#Run generated code also with ERM
runwitherm = False

# Print dictionaries of choices: { 'RuleName': [list of choices] }
printchoices = False

# Save generated Sigma-LL src
savesigma = True

# Copy the best kernel into results folder
copybestkernel = True
copyallkernels = True

# Whether explicitly vectorized or not
useintrinsics = True

# Apply scalar replacement
scarep: True

# Unrolling inner loops
unrollinner = True

# Priority among Temp. loc., Spa. loc., and ILP
indexorder = {0:'t', 1:'s', 2:'i'}
# indexorder = {2:'t', 1:'s', 0:'i'}

# Choose randomly among choices
random = False

# Limit to # of compilation iterations.
# This applies to every determined BLA-Program.
# 0 = exhaustive
limit = 3

# Marker for the plot
marker = ''
color = '#000000' 
lw = 4.

[loadmod]

# L Rule Manager
lrm = ('src.rules.lrms', 'HOfflineLRM')
slrm = ('src.rules.slrms', 'HOfflineSLRM')

# Select code generator
codegen = ('src.generator', 'NewGenerator')

# Select unparser
unparser = ('src.unparser', 'Unparser')

# ISA options
isaman = ('src.isas.isabase', 'EnhancedISAManager')

[withopts]

# L Rule Set
vallrs = ('src.rules.llrules', 'AtlasRuleSet_HVal')
iterlrs = ('src.rules.llrules', 'AtlasRuleSet_NuWay_HSquareTileForReg')

# AtlasRuleSet_NuWay Good for gen. reg. tiles
slrs = ('src.rules.sllrules', ['HFuseSLLRuleSet', 'HNegSaccSLLRuleSet'] )
